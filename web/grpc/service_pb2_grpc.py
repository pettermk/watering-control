# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from web.grpc import service_pb2 as web_dot_grpc_dot_service__pb2


class WaterControllerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddControllers = channel.unary_unary(
                '/WaterController/AddControllers',
                request_serializer=web_dot_grpc_dot_service__pb2.Configurations.SerializeToString,
                response_deserializer=web_dot_grpc_dot_service__pb2.Status.FromString,
                )
        self.GetValues = channel.unary_unary(
                '/WaterController/GetValues',
                request_serializer=web_dot_grpc_dot_service__pb2.Configuration.SerializeToString,
                response_deserializer=web_dot_grpc_dot_service__pb2.Values.FromString,
                )


class WaterControllerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def AddControllers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetValues(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_WaterControllerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AddControllers': grpc.unary_unary_rpc_method_handler(
                    servicer.AddControllers,
                    request_deserializer=web_dot_grpc_dot_service__pb2.Configurations.FromString,
                    response_serializer=web_dot_grpc_dot_service__pb2.Status.SerializeToString,
            ),
            'GetValues': grpc.unary_unary_rpc_method_handler(
                    servicer.GetValues,
                    request_deserializer=web_dot_grpc_dot_service__pb2.Configuration.FromString,
                    response_serializer=web_dot_grpc_dot_service__pb2.Values.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'WaterController', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class WaterController(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def AddControllers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/WaterController/AddControllers',
            web_dot_grpc_dot_service__pb2.Configurations.SerializeToString,
            web_dot_grpc_dot_service__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetValues(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/WaterController/GetValues',
            web_dot_grpc_dot_service__pb2.Configuration.SerializeToString,
            web_dot_grpc_dot_service__pb2.Values.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
